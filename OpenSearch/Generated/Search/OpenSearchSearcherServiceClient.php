<?php

namespace OpenSearch\Generated\Search;

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;
class OpenSearchSearcherServiceClient extends \OpenSearch\Generated\GeneralSearcher\GeneralSearcherServiceClient implements \OpenSearch\Generated\Search\OpenSearchSearcherServiceIf
{
    public function __construct($input, $output = null)
    {
        parent::__construct($input, $output);
    }
    public function execute(\OpenSearch\Generated\Search\SearchParams $searchParams)
    {
        $this->send_execute($searchParams);
        return $this->recv_execute();
    }
    public function send_execute(\OpenSearch\Generated\Search\SearchParams $searchParams)
    {
        $args = new \OpenSearch\Generated\Search\OpenSearchSearcherService_execute_args();
        $args->searchParams = $searchParams;
        $bin_accel = $this->output_ instanceof \Thrift\Protocol\TBinaryProtocolAccelerated && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary($this->output_, 'execute', \Thrift\Type\TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
        } else {
            $this->output_->writeMessageBegin('execute', \Thrift\Type\TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }
    public function recv_execute()
    {
        $bin_accel = $this->input_ instanceof \Thrift\Protocol\TBinaryProtocolAccelerated && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary($this->input_, '\OpenSearch\Generated\Search\OpenSearchSearcherService_execute_result', $this->input_->isStrictRead());
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;
            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == \Thrift\Type\TMessageType::EXCEPTION) {
                $x = new \Thrift\Exception\TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \OpenSearch\Generated\Search\OpenSearchSearcherService_execute_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->error !== null) {
            throw $result->error;
        }
        if ($result->e !== null) {
            throw $result->e;
        }
        throw new \Exception("execute failed: unknown result");
    }
}

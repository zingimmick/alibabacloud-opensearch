<?php

namespace OpenSearch\Generated\SecondRank;

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;
class SecondRankService_updateById_args
{
    static $_TSPEC;
    /**
     * @var string
     */
    public $id = null;
    /**
     * @var \OpenSearch\Generated\SecondRank\SecondRank
     */
    public $secondRank = null;
    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(1 => array('var' => 'id', 'type' => \Thrift\Type\TType::STRING), 2 => array('var' => 'secondRank', 'type' => \Thrift\Type\TType::STRUCT, 'class' => '\OpenSearch\Generated\SecondRank\SecondRank'));
        }
        if (is_array($vals)) {
            if (isset($vals['id'])) {
                $this->id = $vals['id'];
            }
            if (isset($vals['secondRank'])) {
                $this->secondRank = $vals['secondRank'];
            }
        }
    }
    public function getName()
    {
        return 'SecondRankService_updateById_args';
    }
    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == \Thrift\Type\TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == \Thrift\Type\TType::STRING) {
                        $xfer += $input->readString($this->id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == \Thrift\Type\TType::STRUCT) {
                        $this->secondRank = new \OpenSearch\Generated\SecondRank\SecondRank();
                        $xfer += $this->secondRank->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('SecondRankService_updateById_args');
        if ($this->id !== null) {
            $xfer += $output->writeFieldBegin('id', \Thrift\Type\TType::STRING, 1);
            $xfer += $output->writeString($this->id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->secondRank !== null) {
            if (!is_object($this->secondRank)) {
                throw new \Thrift\Exception\TProtocolException('Bad type in structure.', \Thrift\Exception\TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('secondRank', \Thrift\Type\TType::STRUCT, 2);
            $xfer += $this->secondRank->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}

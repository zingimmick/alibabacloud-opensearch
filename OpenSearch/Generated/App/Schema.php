<?php

namespace OpenSearch\Generated\App;

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;
class Schema
{
    static $_TSPEC;
    /**
     * @var array
     */
    public $tables = null;
    /**
     * @var \OpenSearch\Generated\App\Indexes
     */
    public $indexes = null;
    /**
     * @var string
     */
    public $route_field = null;
    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(1 => array('var' => 'tables', 'type' => \Thrift\Type\TType::MAP, 'ktype' => \Thrift\Type\TType::STRING, 'vtype' => \Thrift\Type\TType::STRUCT, 'key' => array('type' => \Thrift\Type\TType::STRING), 'val' => array('type' => \Thrift\Type\TType::STRUCT, 'class' => '\OpenSearch\Generated\App\Table')), 2 => array('var' => 'indexes', 'type' => \Thrift\Type\TType::STRUCT, 'class' => '\OpenSearch\Generated\App\Indexes'), 3 => array('var' => 'route_field', 'type' => \Thrift\Type\TType::STRING));
        }
        if (is_array($vals)) {
            if (isset($vals['tables'])) {
                $this->tables = $vals['tables'];
            }
            if (isset($vals['indexes'])) {
                $this->indexes = $vals['indexes'];
            }
            if (isset($vals['route_field'])) {
                $this->route_field = $vals['route_field'];
            }
        }
    }
    public function getName()
    {
        return 'Schema';
    }
    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == \Thrift\Type\TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == \Thrift\Type\TType::MAP) {
                        $this->tables = array();
                        $_size39 = 0;
                        $_ktype40 = 0;
                        $_vtype41 = 0;
                        $xfer += $input->readMapBegin($_ktype40, $_vtype41, $_size39);
                        for ($_i43 = 0; $_i43 < $_size39; ++$_i43) {
                            $key44 = '';
                            $val45 = new \OpenSearch\Generated\App\Table();
                            $xfer += $input->readString($key44);
                            $val45 = new \OpenSearch\Generated\App\Table();
                            $xfer += $val45->read($input);
                            $this->tables[$key44] = $val45;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == \Thrift\Type\TType::STRUCT) {
                        $this->indexes = new \OpenSearch\Generated\App\Indexes();
                        $xfer += $this->indexes->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == \Thrift\Type\TType::STRING) {
                        $xfer += $input->readString($this->route_field);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('Schema');
        if ($this->tables !== null) {
            if (!is_array($this->tables)) {
                throw new \Thrift\Exception\TProtocolException('Bad type in structure.', \Thrift\Exception\TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('tables', \Thrift\Type\TType::MAP, 1);
            $output->writeMapBegin(\Thrift\Type\TType::STRING, \Thrift\Type\TType::STRUCT, count($this->tables));
            foreach ($this->tables as $kiter46 => $viter47) {
                $xfer += $output->writeString($kiter46);
                $xfer += $viter47->write($output);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->indexes !== null) {
            if (!is_object($this->indexes)) {
                throw new \Thrift\Exception\TProtocolException('Bad type in structure.', \Thrift\Exception\TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('indexes', \Thrift\Type\TType::STRUCT, 2);
            $xfer += $this->indexes->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->route_field !== null) {
            $xfer += $output->writeFieldBegin('route_field', \Thrift\Type\TType::STRING, 3);
            $xfer += $output->writeString($this->route_field);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}

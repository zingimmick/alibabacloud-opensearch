<?php

namespace OpenSearch\Generated\App;

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;
class Table
{
    static $_TSPEC;
    /**
     * @var array
     */
    public $fields = null;
    /**
     * @var bool
     */
    public $primary_table = null;
    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(1 => array('var' => 'fields', 'type' => \Thrift\Type\TType::MAP, 'ktype' => \Thrift\Type\TType::STRING, 'vtype' => \Thrift\Type\TType::STRUCT, 'key' => array('type' => \Thrift\Type\TType::STRING), 'val' => array('type' => \Thrift\Type\TType::STRUCT, 'class' => '\OpenSearch\Generated\App\Field')), 2 => array('var' => 'primary_table', 'type' => \Thrift\Type\TType::BOOL));
        }
        if (is_array($vals)) {
            if (isset($vals['fields'])) {
                $this->fields = $vals['fields'];
            }
            if (isset($vals['primary_table'])) {
                $this->primary_table = $vals['primary_table'];
            }
        }
    }
    public function getName()
    {
        return 'Table';
    }
    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == \Thrift\Type\TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == \Thrift\Type\TType::MAP) {
                        $this->fields = array();
                        $_size7 = 0;
                        $_ktype8 = 0;
                        $_vtype9 = 0;
                        $xfer += $input->readMapBegin($_ktype8, $_vtype9, $_size7);
                        for ($_i11 = 0; $_i11 < $_size7; ++$_i11) {
                            $key12 = '';
                            $val13 = new \OpenSearch\Generated\App\Field();
                            $xfer += $input->readString($key12);
                            $val13 = new \OpenSearch\Generated\App\Field();
                            $xfer += $val13->read($input);
                            $this->fields[$key12] = $val13;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == \Thrift\Type\TType::BOOL) {
                        $xfer += $input->readBool($this->primary_table);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('Table');
        if ($this->fields !== null) {
            if (!is_array($this->fields)) {
                throw new \Thrift\Exception\TProtocolException('Bad type in structure.', \Thrift\Exception\TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('fields', \Thrift\Type\TType::MAP, 1);
            $output->writeMapBegin(\Thrift\Type\TType::STRING, \Thrift\Type\TType::STRUCT, count($this->fields));
            foreach ($this->fields as $kiter14 => $viter15) {
                $xfer += $output->writeString($kiter14);
                $xfer += $viter15->write($output);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->primary_table !== null) {
            $xfer += $output->writeFieldBegin('primary_table', \Thrift\Type\TType::BOOL, 2);
            $xfer += $output->writeBool($this->primary_table);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}

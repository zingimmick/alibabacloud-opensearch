<?php

namespace OpenSearch\Generated\App;

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;
class App
{
    static $_TSPEC;
    /**
     * @var string
     */
    public $id = null;
    /**
     * @var string
     */
    public $name = null;
    /**
     * @var string
     */
    public $type = "advance";
    /**
     * @var \OpenSearch\Generated\App\Schema
     */
    public $schema = null;
    /**
     * @var \OpenSearch\Generated\App\Quota
     */
    public $quota = null;
    /**
     * @var string
     */
    public $description = null;
    /**
     * @var \OpenSearch\Generated\App\Group
     */
    public $group = null;
    /**
     * @var bool
     */
    public $auto_switch = null;
    /**
     * @var int
     */
    public $switch_time = null;
    /**
     * @var string[]
     */
    public $fetch_fields = null;
    /**
     * @var array
     */
    public $first_ranks = null;
    /**
     * @var string
     */
    public $virtual_cluster = null;
    /**
     * @var bool
     */
    public $realtime_shared = null;
    /**
     * @var int
     */
    public $status = null;
    /**
     * @var int
     */
    public $data_progress = null;
    /**
     * @var int
     */
    public $progress_percent = null;
    /**
     * @var bool
     */
    public $rebuilding = null;
    /**
     * @var int
     */
    public $unread_error_count = null;
    /**
     * @var int
     */
    public $action_cause = null;
    public function __construct($vals = null)
    {
        if (!isset(self::$_TSPEC)) {
            self::$_TSPEC = array(1 => array('var' => 'id', 'type' => \Thrift\Type\TType::STRING), 10 => array('var' => 'name', 'type' => \Thrift\Type\TType::STRING), 11 => array('var' => 'type', 'type' => \Thrift\Type\TType::STRING), 12 => array('var' => 'schema', 'type' => \Thrift\Type\TType::STRUCT, 'class' => '\OpenSearch\Generated\App\Schema'), 13 => array('var' => 'quota', 'type' => \Thrift\Type\TType::STRUCT, 'class' => '\OpenSearch\Generated\App\Quota'), 14 => array('var' => 'description', 'type' => \Thrift\Type\TType::STRING), 15 => array('var' => 'group', 'type' => \Thrift\Type\TType::STRUCT, 'class' => '\OpenSearch\Generated\App\Group'), 16 => array('var' => 'auto_switch', 'type' => \Thrift\Type\TType::BOOL), 17 => array('var' => 'switch_time', 'type' => \Thrift\Type\TType::I32), 18 => array('var' => 'fetch_fields', 'type' => \Thrift\Type\TType::LST, 'etype' => \Thrift\Type\TType::STRING, 'elem' => array('type' => \Thrift\Type\TType::STRING)), 19 => array('var' => 'first_ranks', 'type' => \Thrift\Type\TType::MAP, 'ktype' => \Thrift\Type\TType::STRING, 'vtype' => \Thrift\Type\TType::STRUCT, 'key' => array('type' => \Thrift\Type\TType::STRING), 'val' => array('type' => \Thrift\Type\TType::STRUCT, 'class' => '\OpenSearch\Generated\FirstRank\FirstRank')), 20 => array('var' => 'virtual_cluster', 'type' => \Thrift\Type\TType::STRING), 21 => array('var' => 'realtime_shared', 'type' => \Thrift\Type\TType::BOOL), 100 => array('var' => 'status', 'type' => \Thrift\Type\TType::I32), 101 => array('var' => 'data_progress', 'type' => \Thrift\Type\TType::I32), 102 => array('var' => 'progress_percent', 'type' => \Thrift\Type\TType::I32), 103 => array('var' => 'rebuilding', 'type' => \Thrift\Type\TType::BOOL), 104 => array('var' => 'unread_error_count', 'type' => \Thrift\Type\TType::I32), 105 => array('var' => 'action_cause', 'type' => \Thrift\Type\TType::I32));
        }
        if (is_array($vals)) {
            if (isset($vals['id'])) {
                $this->id = $vals['id'];
            }
            if (isset($vals['name'])) {
                $this->name = $vals['name'];
            }
            if (isset($vals['type'])) {
                $this->type = $vals['type'];
            }
            if (isset($vals['schema'])) {
                $this->schema = $vals['schema'];
            }
            if (isset($vals['quota'])) {
                $this->quota = $vals['quota'];
            }
            if (isset($vals['description'])) {
                $this->description = $vals['description'];
            }
            if (isset($vals['group'])) {
                $this->group = $vals['group'];
            }
            if (isset($vals['auto_switch'])) {
                $this->auto_switch = $vals['auto_switch'];
            }
            if (isset($vals['switch_time'])) {
                $this->switch_time = $vals['switch_time'];
            }
            if (isset($vals['fetch_fields'])) {
                $this->fetch_fields = $vals['fetch_fields'];
            }
            if (isset($vals['first_ranks'])) {
                $this->first_ranks = $vals['first_ranks'];
            }
            if (isset($vals['virtual_cluster'])) {
                $this->virtual_cluster = $vals['virtual_cluster'];
            }
            if (isset($vals['realtime_shared'])) {
                $this->realtime_shared = $vals['realtime_shared'];
            }
            if (isset($vals['status'])) {
                $this->status = $vals['status'];
            }
            if (isset($vals['data_progress'])) {
                $this->data_progress = $vals['data_progress'];
            }
            if (isset($vals['progress_percent'])) {
                $this->progress_percent = $vals['progress_percent'];
            }
            if (isset($vals['rebuilding'])) {
                $this->rebuilding = $vals['rebuilding'];
            }
            if (isset($vals['unread_error_count'])) {
                $this->unread_error_count = $vals['unread_error_count'];
            }
            if (isset($vals['action_cause'])) {
                $this->action_cause = $vals['action_cause'];
            }
        }
    }
    public function getName()
    {
        return 'App';
    }
    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == \Thrift\Type\TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == \Thrift\Type\TType::STRING) {
                        $xfer += $input->readString($this->id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == \Thrift\Type\TType::STRING) {
                        $xfer += $input->readString($this->name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == \Thrift\Type\TType::STRING) {
                        $xfer += $input->readString($this->type);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == \Thrift\Type\TType::STRUCT) {
                        $this->schema = new \OpenSearch\Generated\App\Schema();
                        $xfer += $this->schema->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == \Thrift\Type\TType::STRUCT) {
                        $this->quota = new \OpenSearch\Generated\App\Quota();
                        $xfer += $this->quota->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == \Thrift\Type\TType::STRING) {
                        $xfer += $input->readString($this->description);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 15:
                    if ($ftype == \Thrift\Type\TType::STRUCT) {
                        $this->group = new \OpenSearch\Generated\App\Group();
                        $xfer += $this->group->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 16:
                    if ($ftype == \Thrift\Type\TType::BOOL) {
                        $xfer += $input->readBool($this->auto_switch);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 17:
                    if ($ftype == \Thrift\Type\TType::I32) {
                        $xfer += $input->readI32($this->switch_time);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 18:
                    if ($ftype == \Thrift\Type\TType::LST) {
                        $this->fetch_fields = array();
                        $_size55 = 0;
                        $_etype58 = 0;
                        $xfer += $input->readListBegin($_etype58, $_size55);
                        for ($_i59 = 0; $_i59 < $_size55; ++$_i59) {
                            $elem60 = null;
                            $xfer += $input->readString($elem60);
                            $this->fetch_fields[] = $elem60;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 19:
                    if ($ftype == \Thrift\Type\TType::MAP) {
                        $this->first_ranks = array();
                        $_size61 = 0;
                        $_ktype62 = 0;
                        $_vtype63 = 0;
                        $xfer += $input->readMapBegin($_ktype62, $_vtype63, $_size61);
                        for ($_i65 = 0; $_i65 < $_size61; ++$_i65) {
                            $key66 = '';
                            $val67 = new \OpenSearch\Generated\FirstRank\FirstRank();
                            $xfer += $input->readString($key66);
                            $val67 = new \OpenSearch\Generated\FirstRank\FirstRank();
                            $xfer += $val67->read($input);
                            $this->first_ranks[$key66] = $val67;
                        }
                        $xfer += $input->readMapEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 20:
                    if ($ftype == \Thrift\Type\TType::STRING) {
                        $xfer += $input->readString($this->virtual_cluster);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 21:
                    if ($ftype == \Thrift\Type\TType::BOOL) {
                        $xfer += $input->readBool($this->realtime_shared);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 100:
                    if ($ftype == \Thrift\Type\TType::I32) {
                        $xfer += $input->readI32($this->status);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 101:
                    if ($ftype == \Thrift\Type\TType::I32) {
                        $xfer += $input->readI32($this->data_progress);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 102:
                    if ($ftype == \Thrift\Type\TType::I32) {
                        $xfer += $input->readI32($this->progress_percent);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 103:
                    if ($ftype == \Thrift\Type\TType::BOOL) {
                        $xfer += $input->readBool($this->rebuilding);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 104:
                    if ($ftype == \Thrift\Type\TType::I32) {
                        $xfer += $input->readI32($this->unread_error_count);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 105:
                    if ($ftype == \Thrift\Type\TType::I32) {
                        $xfer += $input->readI32($this->action_cause);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }
    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('App');
        if ($this->id !== null) {
            $xfer += $output->writeFieldBegin('id', \Thrift\Type\TType::STRING, 1);
            $xfer += $output->writeString($this->id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->name !== null) {
            $xfer += $output->writeFieldBegin('name', \Thrift\Type\TType::STRING, 10);
            $xfer += $output->writeString($this->name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->type !== null) {
            $xfer += $output->writeFieldBegin('type', \Thrift\Type\TType::STRING, 11);
            $xfer += $output->writeString($this->type);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->schema !== null) {
            if (!is_object($this->schema)) {
                throw new \Thrift\Exception\TProtocolException('Bad type in structure.', \Thrift\Exception\TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('schema', \Thrift\Type\TType::STRUCT, 12);
            $xfer += $this->schema->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->quota !== null) {
            if (!is_object($this->quota)) {
                throw new \Thrift\Exception\TProtocolException('Bad type in structure.', \Thrift\Exception\TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('quota', \Thrift\Type\TType::STRUCT, 13);
            $xfer += $this->quota->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->description !== null) {
            $xfer += $output->writeFieldBegin('description', \Thrift\Type\TType::STRING, 14);
            $xfer += $output->writeString($this->description);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->group !== null) {
            if (!is_object($this->group)) {
                throw new \Thrift\Exception\TProtocolException('Bad type in structure.', \Thrift\Exception\TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('group', \Thrift\Type\TType::STRUCT, 15);
            $xfer += $this->group->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->auto_switch !== null) {
            $xfer += $output->writeFieldBegin('auto_switch', \Thrift\Type\TType::BOOL, 16);
            $xfer += $output->writeBool($this->auto_switch);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->switch_time !== null) {
            $xfer += $output->writeFieldBegin('switch_time', \Thrift\Type\TType::I32, 17);
            $xfer += $output->writeI32($this->switch_time);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->fetch_fields !== null) {
            if (!is_array($this->fetch_fields)) {
                throw new \Thrift\Exception\TProtocolException('Bad type in structure.', \Thrift\Exception\TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('fetch_fields', \Thrift\Type\TType::LST, 18);
            $output->writeListBegin(\Thrift\Type\TType::STRING, count($this->fetch_fields));
            foreach ($this->fetch_fields as $iter68) {
                $xfer += $output->writeString($iter68);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->first_ranks !== null) {
            if (!is_array($this->first_ranks)) {
                throw new \Thrift\Exception\TProtocolException('Bad type in structure.', \Thrift\Exception\TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('first_ranks', \Thrift\Type\TType::MAP, 19);
            $output->writeMapBegin(\Thrift\Type\TType::STRING, \Thrift\Type\TType::STRUCT, count($this->first_ranks));
            foreach ($this->first_ranks as $kiter69 => $viter70) {
                $xfer += $output->writeString($kiter69);
                $xfer += $viter70->write($output);
            }
            $output->writeMapEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->virtual_cluster !== null) {
            $xfer += $output->writeFieldBegin('virtual_cluster', \Thrift\Type\TType::STRING, 20);
            $xfer += $output->writeString($this->virtual_cluster);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->realtime_shared !== null) {
            $xfer += $output->writeFieldBegin('realtime_shared', \Thrift\Type\TType::BOOL, 21);
            $xfer += $output->writeBool($this->realtime_shared);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->status !== null) {
            $xfer += $output->writeFieldBegin('status', \Thrift\Type\TType::I32, 100);
            $xfer += $output->writeI32($this->status);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->data_progress !== null) {
            $xfer += $output->writeFieldBegin('data_progress', \Thrift\Type\TType::I32, 101);
            $xfer += $output->writeI32($this->data_progress);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->progress_percent !== null) {
            $xfer += $output->writeFieldBegin('progress_percent', \Thrift\Type\TType::I32, 102);
            $xfer += $output->writeI32($this->progress_percent);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->rebuilding !== null) {
            $xfer += $output->writeFieldBegin('rebuilding', \Thrift\Type\TType::BOOL, 103);
            $xfer += $output->writeBool($this->rebuilding);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->unread_error_count !== null) {
            $xfer += $output->writeFieldBegin('unread_error_count', \Thrift\Type\TType::I32, 104);
            $xfer += $output->writeI32($this->unread_error_count);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->action_cause !== null) {
            $xfer += $output->writeFieldBegin('action_cause', \Thrift\Type\TType::I32, 105);
            $xfer += $output->writeI32($this->action_cause);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
